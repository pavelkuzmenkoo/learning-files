День 1-2

useQuery - хук, который позволяет делать запросы к API
он принимает несколько параметров, основные это 
    query - строка с запросом, 
    options - объект с дополнительными параметрами
options включает в себя 
    variables - объект с переменными, 
    fetchPolicy - политика загрузки, 
    errorPolicy - политика обработки ошибок

    fetchPolicy имеет такие значения
        cache-first - загрузка данных из кэша, 
        cache-and-network - загрузка данных из кэша и сети, 
        cache-only - загрузка данных только из кэша, 
        network-only - загрузка данных только из сети, 
        no-cache - загрузка данных без кэширования
        standby - Использует ту же логику, что и cache-first, за исключением того, что этот запрос не обновляется автоматически при изменении значений базовых полей.

После вызова useQuery возвращает объект, который содержит 
    data - данные, 
    loading - булево значение, завершена ли загрузка, 
    error - ошибка, если запрос завершился с ошибкой
и еще несколько полезных методов и свойств таких как refetch, networkStatus и другие

    refetch - позволяет перезагрузить данные,
    networkStatus - состояние загрузки, [loading = 1, setVariables = 2, fetchMore = 3, refetch = 4, poll = 6, ready = 7, error = 8]


День 3
Hasura Query 
Аргумент order_by
Порядок сортировки (по возрастанию или по убыванию) задается путем указания значения Asc или Desc перечисления для имени столбца во order_by входном объекте
    query AuthorsSorted {
        authors (
        order_by: {name: Asc}
        ) {
            id
            name
        }
    }
    
Операторы limit и offset используются для пагинации.

limit указывает количество строк, которые необходимо сохранить из набора результатов, и offset определяет, какой фрагмент следует сохранить из результатов.
    query AuthorsFromSixth {
        authors(
            limit: 5,
            offset:5
        ) {
            id
            name
        }
    }

вместо offset можно использовать where с оператороми по типу _in, _eq, _gt, _lt, _gte, _lte, _neq
    query AuthorsGreaterThanFive {
        authors(
            limit: 5,
            where: { id: {_gt: 5} }
        ) {
            id
            name
        }
    }

_eq(равно)
_neq(не равно) 
_is_null(равно null)
_gt(больше)
_lt(меньше)
_gte(больше или равно)
_lte(меньше или равно)
_in(входит в список)
_or(или)
_and(и)
_not(не)
_like(содержит)
_ilike(содержит, без учета регистра)
_similar
    query AuthorsNotWithAorC {
        authors(
            where: {name: {_similar: "(A|C)%"}} // чьи имена начинаются на букву A или C
        ) {
            id
            name
        }
    }
_nsimilar
_regex(регулярное выражение)
_nregex(не подходит под регулярное выражение)


День 4 
useMutation - хук, который позволяет выполнять мутацию (изменение) в базе данных, возвращает 2 значения:
    1 - функция, которая позволяет вызвать мутацию, 
    2 - объект, содержащий состояние мутации

пример использования 
    const [login, { data, loading, error }] = useMutation(LOGIN_MUTATION);
    
есть дополнительные параметры, которые можно передать в useMutation например 
    -refetchQueries - содержат список запросов, которые должны быть перезагружены после мутации
    -variables - объект, содержащий переменные, которые будут переданы в мутацию
    -onCompleted - callback, который вызывается, когда мутация завершена
    -onError - callback, который вызывается, если мутация завершается с ошибкой
    -update - обновление кэша вручную   

в обьекте состояния мутации есть 3 значения:
    -data - данные, возвращаемые мутацией
    -loading - булево значение, указывающее, загружается ли мутация
    -error - объект, содержащий информацию об ошибке
    -reset 

День 5 
Hasura Queries 
Можно использовать фрагменты (fragments) для повторного использования части запроса
    fragment articleFields on bigquery_articles {
        id
        title
    }
    query getArticles {
        bigquery_articles {
            ...articleFields
        }
        topTwoArticles: bigquery_articles(
            order_by: {rating: desc},
        limit: 2
    ) {
        ...articleFields
    }
    }

Hasura Mutations

insert_field - ставить несколько объектов одного типа в одну и ту же мутацию
insert_field_one - ставить один объект в мутацию
    mutation insert_single_article {
        insert_article_one(
            object: {
                title: "Article 1",
                content: "Sample article content",
                author_id: 3
            }
        ) {
            id
            title
        }
    }

с использованием переменных:

    mutation insert_single_article($object: article_insert_input! ) {
        insert_article_one(object: $object) {
            id
            title
        }
    }

Вставьте объект вместе со связанными с ним объектами через объект-связь (object-relationship):

One-to-one / One-to-many relationships
    mutation insertData {
        insert_authors
            (objects: [
                {
                    name: "John",
                    address: {
                        data: {
                            location: "San Francisco"
                        }
                    },
                    articles: {
                        data: [
                            {
                                title: "GraphQL Guide",
                                content: "Let's see what we can do with GraphQL"
                            },
                            {
                                title: "Authentication Guide",
                                content: "Let's look at best practices for authentication"
                            }
                        ]
                    }
                }
            ]
        ) {
            affected_rows
            returning {
                id
                name
                address_id
                address {
                    id
                    location
                }
                articles {
                    id
                    title
                    author_id
                }
            }
        }
    }


Many-to-many relationships

    mutation insertArticle {
        insert_articles(objects: [
            {
                title: "How to make fajitas",
                content: "Guide on making the best fajitas in the world",
                author_id: 3,
                article_tags: {
                    data: [
                        {
                            tag: {
                                data: {
                                    label: "Recipes"
                                },
                                on_conflict: {
                                    constraint: tags_label_key,
                                    update_columns: [label]
                                }
                            }
                        },
                        {
                            tag: {
                                data: {
                                    label: "Cooking"
                                },
                                on_conflict: {
                                    constraint: tags_label_key,
                                    update_columns: [label]
                                }
                            }
                        }
                    ]
                }
            }
        ]
        ) {
            affected_rows
            returning {
                id
                title
                content
                author_id
                article_tags {
                    tag {
                        label
                    }
                }
            }
        }
    } {
        affected_rows
        returning {
            id
            title
            content
            author_id
            article_tags {
                tag {
                    label
                }
            }
        }
    }

День 6
мутация Upsert
Запрос upsert вставит объект в базу данных, если нет конфликта с другой строкой в ​​таблице. В случае конфликта с одной или несколькими строками он либо обновит поля конфликтующих строк, либо проигнорирует запрос.

Чтобы преобразовать мутацию вставки в мутацию обновления и вставки, необходимо использовать on_conflict аргумент для указания:

ограничение уникального или первичного ключа с использованием constraint поля, и
столбцы , которые необходимо обновить в случае нарушения этого ограничения с использованием update_columnsполя.

Для операции upsert требуются все столбцы, необходимые для операции insert .

Update - обновление объекта в базе данных
Требуется хотя бы один из операторов _set, _inc или операторов jsonb _append, _prepend, _delete_key, _delete_elem._delete_at_path

Операторы jsonb

_append	- добавить значение json в jsonb столбец в конец -_append: {extra_info: $value}
_prepend	- добавить значение json к jsonb столбцу в начало -_prepend: {extra_info: $value}
_delete_key	- удалить ключ верхнего уровня из jsonb столбца -_delete_key: {extra_info: "key"}
_delete_elem	- удалить элемент массива из jsonb столбца -_delete_elem: {extra_info: 2} 
_delete_at_path	- удалить элемент по пути из jsonb столбца -_delete_at_path: {extra_info: ["name", "first"]}

Delete - удаление объекта из базы данных

delete_article_by_pk - удаление объекта по первичному ключу

Удалить все статьи с рейтингом ниже 3:

    delete_article(
        where: {rating: {_lt: 3}}
    ) {
        affected_rows
    }

День 7

Subscriptions Получайте обновления в режиме реального времени с вашего сервера GraphQL

пример подписки 
    const COMMENTS_SUBSCRIPTION: TypedDocumentNode<
        OnCommentAddedSubscription,
        OnCommentAddedSubscriptionVariables
    > = gql`
        subscription OnCommentAdded($postID: ID!) {
            commentAdded(postID: $postID) {
                id
                content
            }
        }
    `;

    function LatestComment({ postID }: LatestCommentProps) {
        const { data, loading } = useSubscription(
            COMMENTS_SUBSCRIPTION,
            { variables: { postID } }
        );

        return <h4>New comment: {!loading && data.commentAdded.content}</h4>;
    }   

useSubscription - хук, который позволяет подписаться на события в режиме реального времени
    принимает 2 параметра:
        - query - строка с запросом, 
        - variables - объект с переменными
    возвращает объект с data, loading, error    

Hasura Subscriptions 

Hasura позволяет подписаться на события в режиме реального времени, используя WebSockets.
Live queries - позволяет получать обновления в режиме реального времени. Периодически опрашивают сервер на наличие изменений
Streaming - позволяет получать обновления в режиме реального времени. Поддерживает постоянное соединение для мгновенной передачи изменений