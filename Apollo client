День 1-2

useQuery - хук, который позволяет делать запросы к API
он принимает несколько параметров, основные это 
    query - строка с запросом, 
    options - объект с дополнительными параметрами
options включает в себя 
    variables - объект с переменными, 
    fetchPolicy - политика загрузки, 
    errorPolicy - политика обработки ошибок

    fetchPolicy имеет такие значения
        cache-first - загрузка данных из кэша, 
        cache-and-network - загрузка данных из кэша и сети, 
        cache-only - загрузка данных только из кэша, 
        network-only - загрузка данных только из сети, 
        no-cache - загрузка данных без кэширования
        standby - Использует ту же логику, что и cache-first, за исключением того, что этот запрос не обновляется автоматически при изменении значений базовых полей.

После вызова useQuery возвращает объект, который содержит 
    data - данные, 
    loading - булево значение, завершена ли загрузка, 
    error - ошибка, если запрос завершился с ошибкой
и еще несколько полезных методов и свойств таких как refetch, networkStatus и другие

    refetch - позволяет перезагрузить данные,
    networkStatus - состояние загрузки, [loading = 1, setVariables = 2, fetchMore = 3, refetch = 4, poll = 6, ready = 7, error = 8]


День 3
Hasura Query 
Аргумент order_by
Порядок сортировки (по возрастанию или по убыванию) задается путем указания значения Asc или Desc перечисления для имени столбца во order_by входном объекте
    query AuthorsSorted {
        authors (
        order_by: {name: Asc}
        ) {
            id
            name
        }
    }
    
Операторы limit и offset используются для пагинации.

limit указывает количество строк, которые необходимо сохранить из набора результатов, и offset определяет, какой фрагмент следует сохранить из результатов.
    query AuthorsFromSixth {
        authors(
            limit: 5,
            offset:5
        ) {
            id
            name
        }
    }

вместо offset можно использовать where с оператороми по типу _in, _eq, _gt, _lt, _gte, _lte, _neq
    query AuthorsGreaterThanFive {
        authors(
            limit: 5,
            where: { id: {_gt: 5} }
        ) {
            id
            name
        }
    }

_eq(равно)
_neq(не равно) 
_is_null(равно null)
_gt(больше)
_lt(меньше)
_gte(больше или равно)
_lte(меньше или равно)
_in(входит в список)
_or(или)
_and(и)
_not(не)
_like(содержит)
_ilike(содержит, без учета регистра)
_similar
    query AuthorsNotWithAorC {
        authors(
            where: {name: {_similar: "(A|C)%"}} // чьи имена начинаются на букву A или C
        ) {
            id
            name
        }
    }
_nsimilar
_regex(регулярное выражение)
_nregex(не подходит под регулярное выражение)


День 4 
useMutation - хук, который позволяет выполнять мутацию (изменение) в базе данных, возвращает 2 значения:
    1 - функция, которая позволяет вызвать мутацию, 
    2 - объект, содержащий состояние мутации

пример использования 
    const [login, { data, loading, error }] = useMutation(LOGIN_MUTATION);
    
есть дополнительные параметры, которые можно передать в useMutation например 
    -refetchQueries - содержат список запросов, которые должны быть перезагружены после мутации
    -variables - объект, содержащий переменные, которые будут переданы в мутацию
    -onCompleted - callback, который вызывается, когда мутация завершена
    -onError - callback, который вызывается, если мутация завершается с ошибкой
    -update - обновление кэша вручную   

в обьекте состояния мутации есть 3 значения:
    -data - данные, возвращаемые мутацией
    -loading - булево значение, указывающее, загружается ли мутация
    -error - объект, содержащий информацию об ошибке
    -reset 
    